#!/usr/bin/env node

"use strict" ;

const kungFig = require( 'kung-fig' ) ;

const lib = require( '..' ) ;
const Palette = lib.Palette ;
const FixedPalette = lib.FixedPalette ;
const Color = lib.Color ;

const fs = require( 'fs' ) ;



// Argument management

if ( process.argv.length < 3 ) {
	console.error( "Expecting a palette definition file (.kfg)" ) ;
	process.exit( 1 ) ;
}

var sourceFile = process.argv[ 2 ] ,
	exportType = process.argv[ 3 ] ,
	outputFile = process.argv[ 4 ] ;



// Generate the palette

var config = kungFig.load( sourceFile ) ;
var fixedPalette , content = null ;



// Transform

switch ( exportType ) {
	case 'index-json':
		fixedPalette = new FixedPalette( config ) ;
		content = JSON.stringify( fixedPalette.indexed ) ;
		break ;

	case 'names-json':
		fixedPalette = new FixedPalette( config ) ;
		content = JSON.stringify( fixedPalette.named ) ;
		break ;

	case 'pixelorama': {
		fixedPalette = new FixedPalette( config , 'chroma' ) ;

		let colors = fixedPalette.indexed.map( ( chroma , index ) => ( {
			color: '(' + chroma.rgba().map( ( v , i ) => i < 3 ? v / 255 : v ).join( ', ' ) + ')' ,
			index
		} ) ) ;

		let data = {
			colors ,
			comment: "Generated by Palette Shade" ,
			width: Math.min( 32 , colors.length ) ,
			height: Math.ceil( colors.length / 32 )
		} ;

		content = JSON.stringify( data , undefined , ' ' ) ;
		break ;
	}

	default:
		fixedPalette = new FixedPalette( config ) ;
		console.log( "Color count: " , fixedPalette.indexed.length ) ;
		console.log( "Indexed palette: " , fixedPalette.indexed ) ;
		console.log( "Names: " , fixedPalette.named ) ;
		outputFile = null ;
		break ;
}



// Output

if ( outputFile ) {
	fs.writeFileSync( outputFile , content ) ;
}
else if ( content ) {
	console.log( content ) ;
}

