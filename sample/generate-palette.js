#!/usr/bin/env node

"use strict" ;

const lib = require( '..' ) ;
const Palette = lib.Palette ;
const FixedPalette = lib.FixedPalette ;
const Color = lib.Color ;

const kungFig = require( 'kung-fig' ) ;

const fs = require( 'fs' ) ;



// Argument management

if ( process.argv.length < 3 ) {
	console.error( "Expecting a palette definition file (.kfg)" ) ;
	process.exit( 1 ) ;
}

var sourceFile = process.argv[ 2 ] ,
	exportType = process.argv[ 3 ] ,
	outputFile = process.argv[ 4 ] ;



// Generate the palette

var config = kungFig.load( sourceFile ) ;



// Exporters

var exporters = {} ;

exporters.display = () => {
	let fixedPalette = new FixedPalette( config ) ;
	console.log( "Color count: " , fixedPalette.indexed.length ) ;
	console.log( "Indexed palette: " , fixedPalette.indexed ) ;
	console.log( "Names: " , fixedPalette.named ) ;
} ;

exporters['index-json'] = () => {
	let fixedPalette = new FixedPalette( config ) ;
	let content = JSON.stringify( fixedPalette.indexed ) ;

	if ( outputFile ) { fs.writeFileSync( outputFile , content ) ; }
	else if ( content ) { console.log( content ) ; }
} ;

exporters['names-json'] = () => {
	let fixedPalette = new FixedPalette( config ) ;
	let content = JSON.stringify( fixedPalette.named ) ;

	if ( outputFile ) { fs.writeFileSync( outputFile , content ) ; }
	else if ( content ) { console.log( content ) ; }
} ;

exporters['pixelorama'] = () => {
	let fixedPalette = new FixedPalette( config , 'chroma' ) ;

	let colors = fixedPalette.indexed.map( ( chroma , index ) => ( {
		color: '(' + chroma.rgba().map( ( v , i ) => i < 3 ? v / 255 : v ).join( ', ' ) + ')' ,
		index
	} ) ) ;

	let data = {
		colors ,
		comment: "Generated by Palette Shade" ,
		width: Math.min( 32 , colors.length ) ,
		height: Math.ceil( colors.length / 32 )
	} ;

	let content = JSON.stringify( data , undefined , ' ' ) ;

	if ( outputFile ) { fs.writeFileSync( outputFile , content ) ; }
	else if ( content ) { console.log( content ) ; }
}

exporters['png'] = async () => {
	//const PngToy = require( './pngtoy.min.js' ) ;
	const indexedPng = require( 'indexed-png' ) ;
	fixedPalette = new FixedPalette( config , rgb ) ;

	// First create the palette
	let paletteArray = [] ;
	for ( let color of fixedPalette.indexed ) {
		paletteArray.push(( color.r * 0x33) | ((color.g * 0x33) << 8) | ((color.b * 0x33) << 16));
	}
	
	(async () => {
		const width = 36;
		const height = 6
		const data = Buffer.from(Array(width * height).fill(0).map((_, i) => i % (paletteArray.length)));
		fs.writeFileSync('test.png', (await indexedPng.createPNG(data, palette, width, height)));
	})();
}



if ( exporters[ exportType ] ) { exporters[ exportType ]() ; }
else { exporters.display() ; }

